{"version":3,"sources":["Welcome.js","Time.js","Sites.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","useState","format","Date","date","setDate","setInterval","class","Time","time","setTime","Link","props","className","href","url","name","Sites","App","size","style","zIndex","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAaeA,EAVC,WAAO,IAAD,EACIC,mBAASC,YAAO,IAAIC,KAAQ,oBADhC,mBACbC,EADa,KACPC,EADO,KAOpB,OAJAC,YAAY,WACVD,EAAQH,YAAO,IAAIC,KAAQ,qBAC1B,KAEI,yBAAKI,MAAM,WAAX,uBAA0CH,ICGpCI,EAVF,WAAO,IAAD,EACOP,mBAASC,YAAO,IAAIC,KAAQ,WADnC,mBACVM,EADU,KACJC,EADI,KAOjB,OAJAJ,YAAY,WACVI,EAAQR,YAAO,IAAIC,KAAQ,YAC1B,KAEI,yBAAKI,MAAM,QAAQE,ICRtBE,EAAO,SAAAC,GACX,OACE,wBAAIC,UAAU,QACZ,uBAAGA,UAAU,OAAOC,KAAMF,EAAMG,KAC7BH,EAAMI,QAmBAC,EAbD,WACZ,OACE,yBAAKJ,UAAU,SACb,kBAAC,EAAD,CAAME,IAAI,yBAAyBC,KAAM,WACzC,kBAAC,EAAD,CAAMD,IAAI,wBAAwBC,KAAM,aACxC,kBAAC,EAAD,CAAMD,IAAI,sCAAsCC,KAAM,iBACtD,kBAAC,EAAD,CAAMD,IAAI,uBAAuBC,KAAM,aACvC,kBAAC,EAAD,CAAMD,IAAI,sBAAsBC,KAAM,YACtC,kBAAC,EAAD,CAAMD,IAAI,4BAA4BC,KAAM,gB,QCCnCE,G,uLAZX,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOM,KAAM,GAAIC,MAAO,CAAEC,OAAQ,KAClC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKR,UAAU,iB,GARLS,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cc1dcfbe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { format } from \"date-fns\";\n\nconst Welcome = () => {\n  const [date, setDate] = useState(format(new Date(), \"eeee, LLLL do y\"));\n\n  setInterval(() => {\n    setDate(format(new Date(), \"eeee, LLLL do y\"));\n  }, 10000);\n\n  return <div class=\"welcome\">Welcome back! It is {date}</div>;\n};\n\nexport default Welcome;\n","import React, { useState } from \"react\";\nimport { format } from \"date-fns\";\n\nconst Time = () => {\n  const [time, setTime] = useState(format(new Date(), \"h:mm a\"));\n\n  setInterval(() => {\n    setTime(format(new Date(), \"h:mm a\"));\n  }, 1000);\n\n  return <div class=\"time\">{time}</div>;\n};\n\nexport default Time;\n","import React from \"react\";\n\nconst Link = props => {\n  return (\n    <td className=\"site\">\n      <a className=\"link\" href={props.url}>\n        {props.name}\n      </a>\n    </td>\n  );\n};\n\nconst Sites = () => {\n  return (\n    <div className=\"sites\">\n      <Link url=\"https://kodiak.wne.edu\" name={\"Kodiak\"} />\n      <Link url=\"https://mail.aol.com/\" name={\"AOL Mail\"} />\n      <Link url=\"https://selfservice.wne.edu/Student\" name={\"Self Service\"} />\n      <Link url=\"https://facebook.com\" name={\"Facebook\"} />\n      <Link url=\"https://twitter.com\" name={\"Twitter\"} />\n      <Link url=\"https://connect2u.wne.edu\" name={\"Connect2U\"} />\n    </div>\n  );\n};\n\nexport default Sites;\n","import React, { Component } from \"react\";\nimport Welcome from \"./Welcome\";\nimport Time from \"./Time\";\nimport Sites from \"./Sites\";\nimport { Smile } from \"react-feather\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Time />\n        <Smile size={40} style={{ zIndex: 3 }} />\n        <Welcome />\n        <Sites />\n        <div className=\"overlay\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}